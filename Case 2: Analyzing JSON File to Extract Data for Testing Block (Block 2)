# 1. Import necessaries libraries
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from pandas import json_normalize
import json
import ijson
import csv

# 2. Open and read the JSON file 
with open('C:\cycle_time\JSON_file_testing\light\block2.json','r') as f:
    data = json.load(f)

# 3. Extract the data for Block_2 [FB1] block and calculate the Duration
Block_2 = [x for x in data["traceEvents"] if x["name"] == "Block_2 [FB1]"]

Block_2_dict = {"begintime": [], "endtime": [], "duration": []}

for x in Block_2:  
    #print(x)
    if x["ph"] == "B":
        tsB = x["ts"]
        Block_2_dict["begintime"].append(tsB)
        #break
    if x["ph"] == "E":
        tsE = x["ts"]
        Block_2_dict["endtime"].append(tsE)
        #break
        Duration = (tsE - tsB)
        Block_2_dict["duration"].append(Duration)
Block_2_dict["duration"]

# 4. Extract the data for Light_FB [FB2] and calculate the Duration
Light_FB = [x for x in data["traceEvents"] if x["name"] == "light [FB2]"]

Light_FB_dict = {"begintime": [], "endtime": [], "duration": []}
current_cycle = 1
tsB = None
tsE = None

for x in Light_FB:
    cycle = x["args"]["CyclicInterrupt [OB30] cycle"]
    #print(x)
    if x["ph"] == "B" and cycle == current_cycle:
        tsB = x["ts"]
        Light_FB_dict["begintime"].append(tsB)
        #break
    if x["ph"] == "E" and cycle == current_cycle and tsB is not None:
        tsE = x["ts"]
        Light_FB_dict["endtime"].append(tsE)
        #break
        Duration = (tsE - tsB)
        Light_FB_dict["duration"].append(Duration)
        current_cycle += 1
        tsB = None
        tsE = None
Light_FB_dict["duration"]

# 5. Extract the data for Light1_FB [FB4] and calculate the Duration
Light1_FB = [x for x in data["traceEvents"] if x["name"] == "light 1 [FB4]"]

Light1_FB_dict = {"begintime": [], "endtime": [], "duration": []}

for x in Light1_FB:  
    #print(x)
    if x["ph"] == "B":
        tsB = x["ts"]
        Light1_FB_dict["begintime"].append(tsB)
        #break
    if x["ph"] == "E":
        tsE = x["ts"]
        Light1_FB_dict["endtime"].append(tsE)
        #break
        Duration = (tsE - tsB)
        Light1_FB_dict["duration"].append(Duration)
Light1_FB_dict["duration"]

# 6. Calculate the selfTime for Block_2 [FB1] block
found = False
for x in data["traceEvents"]:
    for y in x:       
        if y == "ts":
            print(x)
            print("worked")
            ts0 = x["ts"]
            found = True
    if found == True:
        break
ts0

Block_2 = [x for x in data["traceEvents"] if x["name"] == "Block_2 [FB1]"]
block = {"args": [], "selfTime": [], "startTime":[], "add": []}
for x in Block_2:  
    if x["ph"] == "B":
        tsB = x["ts"] - ts0
        block["startTime"].append(tsB)
        block["args"].append(x["args"])

for time1,time2,block_time in zip(Light_FB_dict["duration"], Light1_FB_dict["duration"],Block_2_dict["duration"]):
    addition = time1+time2
    block["add"].append(addition)
    Selftime = block_time-addition
    block["selfTime"].append(Selftime)
block["selfTime"]

# 7. Create the Dataframe and save the data into csv file
Block2_dict_df = pd.DataFrame(block)
Block2_dict_df.to_csv('block2.csv', index=False)

# 8. Histogram plot style and reading .csv file
plt.style.use('ggplot')
data=pd.read_csv(r'C:\cycle_time\JSON_file_testing\light\block2.csv')
plt.figure(figsize=(12, 6))
data

# 9. Histogram generation for Block_2 [FB2] block
def Block2_fb(min_range,max_range,steps): 
    Runtime = data['selfTime']
    bins = np.arange(min_range, max_range, steps)
    total_samples = 27780
    relative_freqs = np.histogram(Runtime, bins=bins)[0] / total_samples * 100
    weights = np.ones_like(Runtime) / len(Runtime) * 100
    plt.hist(Runtime, bins=bins, edgecolor = "black", color = "Green", weights=np.ones_like(Runtime) / total_samples * 100, density=False)          
    plt.title('Block [FB2]')
    plt.xlabel('t / Âµs')
    plt.gca().set_ylabel('f / %')
    plt.ylim(0, 100)
    plt.tight_layout()
    plt.show()
Block2_fb(0,63,2)
