// INITIALIZE COUNTER ON POP
IF #POP THEN
    #counter := 0;
    FOR #i := 0 TO #n - 1 DO
        IF (#mode = 0 AND #Buffer[#i] <> 0) OR (#mode = 1 AND #Buffer[#i] <> 0) THEN
            #counter := #counter + 1;
        END_IF;
    END_FOR;
    
    #FULL := #counter = #n;
    #EMPTY := #counter = 0;
END_IF;

// RESET LOGIC
IF #reset THEN
    FOR #i := 0 TO #n-1 DO
        #Buffer[#i] := 0;
    END_FOR;
    
    #pw_no_POP := #pr_no_POP;
    #FULL := FALSE;
    #EMPTY := TRUE;
    #Dout := 0;
// ENABLE LOGIC    
ELSIF #Enable THEN
    // READ POP (SELECT BASED ON MODE)
    IF NOT #EMPTY AND #POP AND #Read THEN
        IF #mode = 0 THEN
            // FIFO READ
            #Dout := #Buffer[0];
            FOR #i := 0 TO #n - 2 DO
                #Buffer[#i] := #Buffer[#i + 1];
            END_FOR;
            #Buffer[#n - 1] := 0;
        ELSE
            // LIFO READ
            #Dout := #Buffer[#counter - 1];
            #Buffer[#counter - 1] := 0;
        END_IF;
        
        #counter := #counter - 1;
        #FULL := FALSE;
        #EMPTY := (#counter = 0);
    END_IF;
    
    // WRITE POP (SELECT BASED ON MODE)
    IF NOT #FULL AND #POP AND #write THEN
        IF #mode = 0 THEN
            // FIFO WRITE
            #Buffer[#counter] := #Din;
        ELSE
            // LIFO WRITE
            #Buffer[#counter] := #Din;
        END_IF;
        
        #pw := #counter;
        #counter := #counter + 1;
        #FULL := (#counter = #n);
        #EMPTY := FALSE;
    END_IF;
  // WRITE NO POP 
    IF NOT #FULL AND #write THEN
        IF #mode = 0 THEN
            // FIFO WRITE_NO_POP
            #Buffer[#pw_no_POP ] := #Din;
        ELSE
            // LIFO WRITE_NO_POP
            #Buffer[#pw_no_POP ] := #Din;
        END_IF;
        
        IF #pw_no_POP >= #n-1 THEN
            #pw_no_POP := 0;
        ELSE
            #pw_no_POP := #pw_no_POP + 1;
        END_IF;
        
        #FULL := #pw_no_POP = #pr_no_POP;
        #EMPTY := FALSE;
    END_IF;
END_IF;
